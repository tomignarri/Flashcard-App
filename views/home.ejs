<% include ./partials/header %>
    
    <div class="container">
      <div class="row justify-content-center">
        <div class="col-lg-4 pt-3" align="center">
          <button id = "displayFlashcards" class="btn btn-outline-dark">Start Learning</button>
        </div>
      </div>
      <div class="row justify-content-center">
        <div class="col-lg-4 py-1" align="center">
          <span id="displayFlashcardCount">0</span>
          <span>
          /
          </span>
          <span id="displayFlashcardTotal">0</span>
        </div>
      </div> 
    </div>
    
    <!-- Flashcard and next/previous buttons -->
    <div class = "container mb-5">
      <div class="row">
        <div class="col-1 col-sm-2 col-lg-3 mx-0 px-0 d-flex justify-content-end align-self-center">
          <button id = "previousFlashcard" class="btn btn-outline-dark btn-lg">
          <i class="fas fa-angle-left"></i>
          </button>
        </div>
        <div class="col-10 col-sm-8 col-lg-6">
          <div id = "displayFlashcard">
            <span id = "clickableFlashcardDisplay">
              <div id = "flashcardTextDisplayArea"></div>
            </span>
          </div>
        </div>
        <div class="col-1 col-sm-2 col-lg-3 mx-0 px-0 d-flex justify-content-start align-self-center">
          <button id = "nextFlashcard"  class="btn btn-outline-dark btn-lg">
          <i class="fas fa-angle-right"></i></button>
        </div>
      </div>
    </div>

   

    <!-- Section to view online translation
    - add form action -->
    <div class="container">
      <div class="row">
          <div class="col-lg-12 p-0">
            <form action="/translate">
            <button 
              class="btn btn-outline-dark btn-sm mb-1"
              id = "accessBingTranslateButton">Translate Flashcard</button>
              <div class="row m-0 p-0">
              <div id="bingTranslateOutput" class="col-lg-12 m-0">
              </div>
            </form>
            </div>
          </div>
      </div>
    </div>

    <script>

    // Overall list of flashcards.
    var flashcardList = {
      
      flashcards: [],
      
      // Adds a flashcard object to Flashcard array.
      addFlashcard: function(fcTextQuestion, fcTextTranslated) {
        this.flashcards.push({
          fcTextQuestion: fcTextQuestion,
          fcTextTranslated: fcTextTranslated
        });
      }, 
    };
    
    // Add flashcards on load.
    var flashcardsDB = <%- JSON.stringify(flashcardsDB) %>;
    console.log("the DB:", flashcardsDB);
    flashcardsDB.forEach(function(fcardDbToAdd){
      flashcardList.addFlashcard(fcardDbToAdd.question, fcardDbToAdd.translation);
    });
    document.querySelector("#displayFlashcardTotal").textContent = flashcardList.flashcards.length;
    
    console.log("the rest:",flashcardList.flashcards);

    // // Bing env variable, key and endpoint
    // var key_var = 'TRANSLATOR_TEXT_SUBSCRIPTION_KEY';
    // if (!process.env[key_var]) {
    //     throw new Error('Please set/export the following environment variable: ' + key_var);
    // }
    // var subscriptionKey = process.env[key_var];
    // var endpoint_var = 'TRANSLATOR_TEXT_ENDPOINT';
    // if (!process.env[endpoint_var]) {
    //     throw new Error('Please set/export the following environment variable: ' + endpoint_var);
    // }
    // var endpoint = process.env[endpoint_var];

    // let options = {
    //     method: 'POST',
    //     baseUrl: endpoint,
    //     url: 'translate',
    //     qs: {
    //       'api-version': '3.0',
    //       'to': ['en']
    //     },
    //     headers: {
    //       'Ocp-Apim-Subscription-Key': subscriptionKey,
    //       'Content-type': 'application/json',
    //       'X-ClientTraceId': uuidv4().toString()
    //     },
    //     body: [{
    //           'text': flashcardList.flashcards[currentFlashcard].fcTextQuestion
    //     }],
    //     json: true,
    // };
    
    
    var currentFlashcard = 0;
    
    // Handle button functionality.
    var handlers = {
      
      isFlipped: false,
      
      // Flip flashcard when the user presses the flashcard.
      displayFlashcard: function(flashcardNumber){
        console.log("FLIPPED: ", this.isFlipped);
        
        // Notify the user that they have no flashcards.
        if(flashcardList.flashcards === undefined || flashcardList.flashcards.length == 0){
          window.alert("You have no flashcards!");
          return;
        }
        
        if(this.isFlipped){
          document.getElementById("flashcardTextDisplayArea").innerHTML = flashcardList.flashcards[flashcardNumber].fcTextTranslated;
          document.getElementById("displayFlashcard").style.backgroundColor = "lightgreen";
        } else {
          //this.displayFlashcards(currentFlashcard);
          document.getElementById("flashcardTextDisplayArea").innerHTML = flashcardList.flashcards[flashcardNumber].fcTextQuestion;
          document.getElementById("displayFlashcard").style.backgroundColor = "aliceblue";
        }
        
        // Show current flashcard index.
        document.querySelector("#displayFlashcardCount").textContent = (currentFlashcard + 1);
        
      },


      // Here is where you will make a request to App.js
      displayBingTranslate: function() {
        
        //flashcardList.flashcards[currentFlashcard].fcTextQuestion
        
        request(options, function(err, res, body){
          document.querySelector("#bingTranslateOutput") = JSON.stringify(body, null, 4);
        });
      },
    };
    
    
    
    // Other functions...spot to add event listeners later
    var view = {
      
      // Receive events from clicks and run functions from handlers.
      setUpEventListeners: function(){
        
        // Variables representing button objects on the DOM.
        var displayFlashcardsButton = document.getElementById("displayFlashcards");
        var nextFlashcardButton = document.getElementById("nextFlashcard");
        var previousFlashcardButton = document.getElementById("previousFlashcard");
        var flipFlashcardButton = document.getElementById("clickableFlashcardDisplay");
        var accessBingTranslate = document.getElementById("accessBingTranslateButton");
        //var displayFlashcardNumber = document.querySelector("#displayFlashcardCount");
        
        flipFlashcardButton.addEventListener("click", function(){
          if(document.querySelector("#flashcardTextDisplayArea").innerHTML === ''){
            window.alert("Press get started button first");
            return;
          }
          handlers.isFlipped = !handlers.isFlipped;  
          handlers.displayFlashcard(currentFlashcard);
        });
    
        // The conditional here checks that the button exists on the DOM.
        if(displayFlashcardsButton){ 
          displayFlashcardsButton.addEventListener("click", function() {
            handlers.isFlipped = false;
            handlers.displayFlashcard(currentFlashcard);
          });
        }
        
        accessBingTranslate.addEventListener("click", function() {
          handlers.displayBingTranslate();
        });
        
        nextFlashcardButton.addEventListener("click", function() {
          
          // Prevent using from iterating card count before displaying cards.
          if(document.querySelector("#flashcardTextDisplayArea").innerHTML === ''){
            window.alert("Press get started button first");
            return;
          }
          currentFlashcard++;
          handlers.isFlipped = false;
          if(currentFlashcard === flashcardList.flashcards.length){
            currentFlashcard = 0;
            //currentFlashcard = flashcardList.flashcards.length - 1; 
            handlers.displayFlashcard(currentFlashcard);
          } else {
            handlers.displayFlashcard(currentFlashcard);
          }
        });
        
        previousFlashcardButton.addEventListener("click", function() {
          
          // Prevent using from iterating card count before displaying cards.
          if(document.querySelector("#flashcardTextDisplayArea").innerHTML === ''){
            window.alert("Press get started button first");
            return;
          }
          currentFlashcard--;
          handlers.isFlipped = false;
          if(currentFlashcard < 0){
            currentFlashcard = flashcardList.flashcards.length - 1; 
            handlers.displayFlashcard(currentFlashcard);
          } else {
            handlers.displayFlashcard(currentFlashcard);
          }
        });
      },
      
    };
    
    view.setUpEventListeners();

    </script>
 
    
    <% include ./partials/footer %>